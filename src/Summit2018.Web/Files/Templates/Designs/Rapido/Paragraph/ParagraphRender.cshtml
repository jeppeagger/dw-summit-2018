@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend

@helper RenderContent(ItemViewModel item, bool isCarousel = false)
{
    string cardClass = item.GetBoolean("ShowAsCard") ? "paragraph-card" : "grid__cell";
    cardClass = Pageview.Device.ToString() != "Tablet" ? cardClass : "grid__cell";

    string contentPosition = item.GetList("ContentPositions").SelectedValue;

    switch (contentPosition) {
        case "title-top":
            <div class="@cardClass">
                @RenderHeading(item)
                @RenderImage(item, isCarousel)
                @RenderText(item)
                @RenderModule(item)
		    </div>
            @RenderButton(item)
            break;
        case "image-left":
            <div class="grid">
                <div class="grid__col-3">
                    @RenderImage(item, isCarousel)
                </div>
                <div class="grid__col-9">
                    @RenderHeading(item)
                    @RenderText(item)
                    @RenderModule(item)
                    @RenderButton(item)
                </div>
            </div>
            break;
        case "image-right":
            <div class="grid">
                <div class="grid__col-9">
                    @RenderHeading(item)
                    @RenderText(item)
                    @RenderModule(item)
                    @RenderButton(item)
                </div>
                <div class="grid__col-3">
                    @RenderImage(item, isCarousel)
                </div>
            </div>
            break;
        case "all-centered":
            <div class="u-ta-center @cardClass">
                @RenderImage(item, isCarousel)
                @RenderHeading(item)
                @RenderText(item)
                @RenderModule(item)
            </div>
            @RenderButton(item)
            break;
        case "middle-center":
        case "middle-left":
            @*Part of styles is placed in Paragraph.cshtml & ParagraphContainer.cshtml*@
            <div class="@(contentPosition == "middle-center" ? "grid--align-self-center" : "")">
                <div class="@cardClass">
                    <div class="@(contentPosition == "middle-center" ? "u-ta-center" : "")">
                        @RenderImage(item, isCarousel)
                        @RenderHeading(item)
                        @RenderText(item)
                        @RenderModule(item)
                    </div>
                </div>
                @RenderButton(item)
            </div>
            break;
        //for "image-top" and "image-centered"
        default:
            <div class="@cardClass">
                @RenderImage(item, isCarousel)
                @RenderHeading(item)
                @RenderText(item)
                @RenderModule(item)
            </div>
            @RenderButton(item)
            break;
    }
}

@helper RenderHeading(ItemViewModel item)
{
    if (item.GetBoolean("ShowTitle") != false && !string.IsNullOrEmpty(item.GetString("Title")))
    {
        string headerMargin = item.GetString("Text") != "" && item.GetString("Image") != "" ? "u-margin-bottom" : "";
        headerMargin = Model.GetModuleOutput() == "" ? headerMargin : "u-margin-bottom";
        string url = item.GetString("Link");

        if (!String.IsNullOrEmpty(url))
        {
            <a href="@url">
                <h2 class="u-no-margin @headerMargin">@item.GetString("Title")</h2>
            </a>
        }
        else
        {
            <h2 class="u-no-margin @headerMargin">@item.GetString("Title")</h2>
        }
    }
}

@helper RenderButton(ItemViewModel item)
{
    string url = item.GetString("Link");
    string linkText = item.GetString("LinkText");
    string secondaryUrl = item.GetString("SecondaryLink");
    string secondaryLinkText = item.GetString("SecondaryLinkText");
    string footerCssClass = "";
    string cardFooterClass = item.GetBoolean("ShowAsCard") ? "paragraph-card-footer" : "grid__cell-footer";
    cardFooterClass = Pageview.Device.ToString() != "Tablet" ? cardFooterClass : "";
    string alingClass = "";

    if (item.GetList("ContentPositions").SelectedValue == "all-centered" || item.GetList("ContentPositions").SelectedValue == "middle-center") {
       footerCssClass = "grid--justify-center"; 
       alingClass = "grid--justify-center";
    }

    if ((!string.IsNullOrEmpty(url) && !string.IsNullOrEmpty(linkText)) || (!string.IsNullOrEmpty(secondaryUrl) && !string.IsNullOrEmpty(secondaryLinkText)))
    {
        <div class="grid__cell @footerCssClass @cardFooterClass">
            <div class="u-margin-top--lg u-margin-bottom @alingClass">

                @if (!string.IsNullOrEmpty(url) && !string.IsNullOrEmpty(linkText))
                {
                    string buttonStyle = !String.IsNullOrEmpty(item.GetList("ButtonDesign").SelectedValue) ? item.GetList("ButtonDesign").SelectedValue : "primary";
                    if (url.Contains("http"))
                    {
                        <a href="@url" class="btn btn--@buttonStyle dw-mod" target="_blank">@linkText</a>
                    }
                    else if (url.Contains("/"))
                    {
                        <a href="@url" class="btn btn--@buttonStyle dw-mod" download>@linkText</a>
                    }
                    else
                    {
                        <a href="@url" class="btn btn--@buttonStyle dw-mod">@linkText</a>
                    }
                }

                @if (!string.IsNullOrEmpty(secondaryUrl) && !string.IsNullOrEmpty(secondaryLinkText))
                {
                    string secondaryButtonStyle = !String.IsNullOrEmpty(item.GetList("SecondaryButtonDesign").SelectedValue) ? item.GetList("SecondaryButtonDesign").SelectedValue : "primary";
                    if (secondaryUrl.Contains("http"))
                    {
                        <a href="@secondaryUrl" class="btn btn--@secondaryButtonStyle dw-mod" target="_blank">@secondaryLinkText</a>
                    }
                    else if (secondaryUrl.Contains("/"))
                    {
                        <a href="@secondaryUrl" class="btn btn--@secondaryButtonStyle dw-mod" download>@secondaryLinkText</a>
                    }
                    else
                    {
                        <a href="@secondaryUrl" class="btn btn--@secondaryButtonStyle dw-mod">@secondaryLinkText</a>
                    }
                }
            </div>
        </div>
    } else {
        <div class="grid__cell-footer @footerCssClass @cardFooterClass"></div>
    }
}

@helper RenderText(ItemViewModel item)
{
    if (!string.IsNullOrWhiteSpace(item.GetString("Text")))
    {
        @item.GetString("Text")
    }
}

@helper RenderModule(ItemViewModel item)
{
    @Model.GetModuleOutput();
}

@helper RenderImage(ItemViewModel item, bool isCarousel)
{
    if (!string.IsNullOrEmpty(item.GetString("Image")) && item.GetList("ImageStyle").SelectedValue != "background")
    {
        string url = item.GetString("Link");

        <div class="u-margin-bottom">
            @if (!String.IsNullOrEmpty(url))
            {
                <a href="@url">
                    @RenderImageElement(item, isCarousel)
                </a>
            }
            else
            {
                @RenderImageElement(item, isCarousel)
            }
        </div>
    }
}

@helper RenderImageElement(ItemViewModel item, bool isCarousel) 
{
    string image = item.GetFile("Image") != null ? item.GetFile("Image").PathUrlEncoded : "";
    string imageFilterColor = item.GetList("ColorForTheFilter").SelectedValue != null ? item.GetList("ColorForTheFilter").SelectedValue : "none";
    string imageFilterPrimary = item.GetList("ImageFilterPrimary").SelectedValue != null ? item.GetList("ImageFilterPrimary").SelectedValue : "none";
    string imageFilterSecondary = item.GetList("ImageFilterSecondary").SelectedValue != null ? item.GetList("ImageFilterSecondary").SelectedValue : "none";
    string imageFilterBall = item.GetList("ImageStyle").SelectedValue == "ball" ? "image-filter--ball" : "";
    string altText = item.GetString("Title");
    string imgCssClass = "";
    string imgCrop = !string.IsNullOrEmpty(item.GetList("ImageCrop").SelectedValue) ? item.GetList("ImageCrop").SelectedValue : "5";
    bool fillCanvas = item.GetBoolean("FillCanvas") != null ? item.GetBoolean("FillCanvas") : true;
    string fillCanvasString = fillCanvas == true ? "&amp;FillCanvas=true" : "";
    string imageBoxWidth = "480";
    int imageWidth = Int32.Parse(item.GetList("Width").SelectedValue) < 8 ? 620 : 1240;
    int imageHeight = Int32.Parse(item.GetList("Width").SelectedValue) < 8  ? 496 : 950;
    string placeHolderImage = "/Files/Images/placeholder.gif";

    if (imageFilterPrimary == "colorize") {
        imageFilterPrimary = imageFilterColor;
    }

    if (item.GetList("ContentPositions").SelectedValue == "image-centered" || item.GetList("ContentPositions").SelectedValue == "all-centered" || item.GetList("ContentPositions").SelectedValue == "middle-center")
    {
        imgCssClass = "grid__cell-img--centered";
    }

    <div class="image image-filter image-filter--@imageFilterPrimary @imageFilterBall dw-mod js-main-image-filter @(item.GetList("ContentPositions").SelectedValue == "middle-center" ? "u-middle" : "")">
        <div class="image-filter image-filter--@imageFilterSecondary @imageFilterBall dw-mod">
            @if (item.GetList("ImageStyle").SelectedValue == "ball")
            {
                imgCssClass += " grid__cell-img--ball";
                if (!isCarousel)
                {
                    <img class="grid__cell-img @imgCssClass b-lazy" src="@placeHolderImage" data-src="/Admin/Public/GetImage.ashx?width=@imageBoxWidth&amp;height=@imageBoxWidth&amp;crop=@imgCrop&amp;Compression=75&amp;DoNotUpscale=true&amp;FillCanvas=true&amp;image=@image" alt="@altText">
                } 
                else 
                { 
                    <img class="grid__cell-img @imgCssClass" src="/Admin/Public/GetImage.ashx?width=@imageBoxWidth&amp;height=@imageBoxWidth&amp;crop=@imgCrop&amp;Compression=75&amp;DoNotUpscale=true&amp;image=@image" alt="@altText">
                }
            }
            else
            {
                string retinaImage = "/Admin/Public/GetImage.ashx?width=" + imageWidth*2 + "&amp;height=" + imageHeight*2 + "&amp;crop=" + imgCrop + "&amp;Compression=75" + fillCanvasString + "&amp;DoNotUpscale=true&amp;image=" + image;
                string largeImage = "/Admin/Public/GetImage.ashx?width=" + imageWidth + "&amp;height=" + imageHeight + "&amp;crop=" + imgCrop + "&amp;Compression=75" + fillCanvasString + "&amp;DoNotUpscale=true&amp;image=" + image;
                string smallImage = "/Admin/Public/GetImage.ashx?width=" + imageWidth + "&amp;height=" + imageHeight + "&amp;crop=" + imgCrop + "&amp;Compression=75" + fillCanvasString+ "&amp;DoNotUpscale=true&amp;image=" + image;

                if (!isCarousel)
                {
                    <img class="@imgCssClass b-lazy" src="@placeHolderImage" data-src="@largeImage|@retinaImage" data-src-small="@smallImage" alt="@altText">
                }
                else
                {
                    <img class="@imgCssClass" src="@largeImage" alt="@altText">
                }
            }
        </div>
    </div>
}