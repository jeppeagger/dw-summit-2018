@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using Dynamicweb.Security;

@MasterPageFile("../../../EmailMaster.cshtml")
@Include("../../../EmailHelpers.cshtml")

@CreatePreheader(GetString("Ecom:Order.ReceiptURL"))

<table bgcolor="#FFFFFF" border="0" cellpadding="0" cellspacing="0" width="500" id="emailBody">
    @RenderHeaderSection()
    @RenderMessage()
    @RenderOrderList()
    @RenderGiftcards()
    @RenderComments()
    @RenderReviewButton()
    @RenderCustomerDetails()
    @RenderPaymentAndShipping()
    @RenderFooterSection()
</table>

@* CONTENT HELPERS *@

@helper RenderHeaderSection()
{
    @RenderHeaderImage();
    
    Column info = new Column();
    info.header = Translate("Shipping confirmation");
    info.text.Add(Translate("Order no.") + " " + GetString("Ecom:Order.ID") + " - " + GetString("Ecom:Order.Completed"));
    info.align = "center";

    @CreateRow(info);

    @CreateRowDivider();

    @RenderRecurringDetails();
}

@helper RenderMessage()
{ 
    Column message = new Column();
    message.text.Add(Translate("Hey") + " " + GetString("Ecom:Order.Customer.Name"));
    message.text.Add("");
    message.text.Add(Translate("Thank you for shopping with us. We'd like to let you know that BikeShop has received your order, and is preparing it for shipment. Your order details are indicated below. If you would like to view the status of your order or make any changes to it, please visit My Orders on") + " <a title='" + Translate("My Orders") + "' href='" + Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host") + "'>" + Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host") + "</a>");

    @CreateRow(message); 
    @CreateRowDivider()
}

@helper RenderCustomerDetails()
{ 
    @RenderAddresses("Billing address", "Shipping address", "Order");
}

@helper RenderOrderList()
{
    foreach (LoopItem orderline in GetLoop("OrderLines"))
    {
        @RenderOrderline(orderline, false);
    }

    @RenderSummary();
    @RenderTotal();
}


@helper RenderSummary()
{
    Column summaryLeft = new Column();
    summaryLeft.text.Add(Translate("VAT"));
    summaryLeft.text.Add(" " + GetString("Ecom:Order.Price.VATPercentFormatted"));
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.PaymentMethod")))
    {
        summaryLeft.text.Add("Payment method (" + GetString("Ecom:Order.PaymentMethod") + ")");
    } 
    else 
    {
        summaryLeft.text.Add("Payment method");
    }
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.PaymentMethod")))
    {
        summaryLeft.text.Add("Shipping method (" + GetString("Ecom:Order.ShippingMethod") + ")");
    } 
    else 
    {
        summaryLeft.text.Add("Shipping method");
    }

    Column summaryRight = new Column();
    summaryRight.text.Add(GetString("Ecom:Order.Price.VATFormatted"));
    summaryRight.text.Add(GetString("Ecom:Order.PaymentFee.PriceFormatted"));
    summaryRight.text.Add(GetString("Ecom:Order.ShippingFee.PriceFormatted"));
    summaryRight.align = "right";

    @CreateRow(summaryLeft, summaryRight);
}


@helper RenderTotal()
{
    Column totalsLeft = new Column();
    totalsLeft.subheader = Translate("Total with VAT");

    Column totalsRight = new Column();
    totalsRight.subheader = GetString("Ecom:Order.Price.PriceWithVATFormatted");
    totalsRight.align = "right";

    @CreateRow(totalsLeft, totalsRight, new RowSettings { backgroundColor = "#e4e4e4" });
}

@helper RenderReviewButton()
{
    @RenderButton(GetString("Ecom:Order.ReceiptURL"), "Review order online");
}